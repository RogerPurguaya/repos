	@api.multi
	def get_data(self,sale_lines,filters,show_breaks,order_param=None):
		results = []
		for item in sale_lines:
			order = order_param if order_param else item['order']
			item = item['sale_line'] if order_param == None else item
			calculator_ids = map(lambda x: x.id,item.id_type_line)
			domain = [] ##analisis de filtros de del combo:
			if filters == 'pending':
				domain = [('templado','=',False)]
			elif filters == 'produced':
				domain = [('templado','=',True)]
			elif filters == 'to inter':
				domain = [('templado','=',True),('ingresado','=',False)]
			elif filters == 'to deliver':
				domain = [('ingresado','=',True),('entregado','=',False)]
			elif filters == 'expired':
				domain = [('templado','=',False)]
			if not show_breaks:
				domain.append(('is_break','=',False))

			lot_lines = self.env['glass.lot.line'].search([('calc_line_id','in',calculator_ids)]+domain)
			if filters == 'expired':
				now = datetime.now().date()
				lot_lines = list(filter(lambda x: datetime.strptime(x.order_date_prod.replace('-',''),"%Y%m%d").date() < now,lot_lines))			
			if len(lot_lines) == 0 and filters != 'pending' and filters != 'all':
				continue
			
			atributo = list(filter(lambda x: x.atributo_id.id==4,item.product_id.product_tmpl_id.atributo_ids))
			if len(atributo) == 0:
				atributo = 'not found'
			else:
				atributo = atributo[0].valor_id.name
			
			## totales desde calculadora
			## empezamos a sacar totales entalle
			filtered = filter(lambda x: x.entalle>0,item.id_type_line)
			area_entalle,vidrios_entalle = '-','-'
			if any(filtered):
				area_entalle=sum(map(lambda y:y.area,filtered))
				vidrios_entalle=sum(map(lambda y:y.cantidad,filtered))

			## empezamos a sacar totales arenado
			filtered = filter(lambda x: x.arenado,item.id_type_line)
			area_arenado,vidrios_arenado = '-','-'
			if any(filtered):
				area_arenado=sum(map(lambda y:y.area,filtered))
				vidrios_arenado=sum(map(lambda y:y.cantidad,filtered))
			
			total_vidrios = map(lambda n:n.cantidad,item.id_type_line)
			total_area = 0
			if any(total_vidrios):
				total_area = sum(item.id_type_line.mapped('area'))
				total_vidrios=sum(item.id_type_line.mapped('cantidad'))
			vals = {
				'cliente':item.order_id.partner_id.name,
				'presentacion': atributo,
				'producto': item.product_id.name,
				'total_area': total_area,
				'total_vidrios':total_vidrios,
				'area_entalle':area_entalle,
				'vidrios_entalle':vidrios_entalle,
				'area_arenado':area_arenado,
				'vidrios_arenado':vidrios_arenado,
			}

			## empezamos a sacar totales optimizado
			filtered = filter(lambda x: x.optimizado,lot_lines)
			area_optimizado = vidrios_optimizado = '-'
			if any(filtered):
				area_optimizado=sum(map(lambda y:y.area,filtered))
				vidrios_optimizado=len(filtered)
			## empezamos a sacar totales corte
			filtered = filter(lambda x: x.corte,lot_lines)
			area_corte,vidrios_corte = '-','-'
			if any(filtered):
				area_corte=sum(map(lambda y:y.area,filtered))
				vidrios_corte=len(filtered)
			## empezamos a sacar totales entalle real
			filtered = filter(lambda x: x.entalle,lot_lines)
			area_entalle_real,vidrios_entalle_real = '-','-'
			if any(filtered):
				area_entalle_real=sum(map(lambda y:y.area,filtered))
				vidrios_entalle_real=len(filtered)
			## empezamos a sacar totales lavado
			filtered = filter(lambda x: x.lavado,lot_lines)
			area_lavado,vidrios_lavado = '-','-'
			if any(filtered):
				area_lavado=sum(map(lambda y:y.area,filtered))
				vidrios_lavado=len(filtered)
			## empezamos a sacar totales templado
			filtered = filter(lambda x: x.templado,lot_lines)
			area_templado,vidrios_templado = '-','-'
			if any(filtered):
				area_templado=sum(map(lambda y:y.area,filtered))
				vidrios_templado=len(filtered)
			## empezamos a sacar totales ingresado
			filtered = filter(lambda x: x.ingresado,lot_lines)
			area_ingresado,vidrios_ingresado = '-','-'
			if any(filtered):
				area_ingresado=sum(map(lambda y:y.area,filtered))
				vidrios_ingresado=len(filtered)
			## empezamos a sacar totales pulido
			filtered = filter(lambda x: x.pulido,lot_lines)
			area_pulido,vidrios_pulido = '-','-'
			if any(filtered):
				area_pulido=sum(map(lambda y:y.area,filtered))
				vidrios_pulido=len(filtered)
			## empezamos a sacar totales insulado
			filtered = filter(lambda x: x.insulado,lot_lines)
			area_insulado,vidrios_insulado = 'NA','NA'
			if any(filtered):
				area_insulado=sum(map(lambda y:y.area,filtered))
				vidrios_insulado=len(filtered)
			## empezamos a sacar totales entregado
			filtered = filter(lambda x: x.entregado,lot_lines)
			area_entregado,vidrios_entregado = '-','-'
			if any(filtered):
				area_entregado=sum(map(lambda y:y.area,filtered))
				vidrios_entregado=len(filtered)
			## empezamos a sacar totales comprado
			filtered = filter(lambda x: x.comprado,lot_lines)
			area_comprado,vidrios_comprado = '-','-'
			if any(filtered):
				area_comprado=sum(map(lambda y:y.area,filtered))
				vidrios_comprado=len(filtered)
			aux = ''
			lot_names = set(map(lambda x: x.lot_id.name ,lot_lines))
			for i in lot_names:
				aux += 'L-'+str(i)+' '

			vals['op'] = order.name
			vals['lot_names'] = aux
			vals['fec_produccion'] = order.date_production.replace('-','/')
			vals['fec_entrega'] = order.date_delivery.replace('-','/')
			vals['fec_despacho'] = order.date_send.replace('-','/')
			vals['obra'] = order.obra if order.obra else ''
			
			invoice = order.invoice_ids[0]
			vals['documento'] = invoice.number if invoice.number else ''
			vals['tipo_doc'] = invoice.it_type_document.code if invoice.it_type_document else ''
			vals['ruc_partner'] = order.partner_id.nro_documento if order.partner_id.nro_documento else ''
			vals['vendedor'] = order.sale_order_id.user_id.name
			vals['pto_llegada'] = order.delivery_street if order.delivery_street else ''
			try:
				pending = total_vidrios - vidrios_templado
				a_pending = item.product_uom_qty - area_templado
			except TypeError as e:
				pending = total_vidrios
				a_pending = item.product_uom_qty
			vals['nro_pendientes']  = pending
			vals['area_pendientes'] = a_pending
			
			state = dict(order._fields['state'].selection).get(order.state)
			vals['estado_op'] = state

			date_kardex,dias_kardex = '',''
			picking = order.sale_order_id.mapped('picking_ids')
			if len(picking) > 0:
				if picking[0].state == 'done':
					date_kardex = picking[0].fecha_kardex
					dias_kardex = (self._str2date(date_kardex) - self._str2date(order.date_send)).days

			vals['fec_kardex'] = date_kardex.replace('-','/')
			vals['dias_kardex'] = dias_kardex
			vals['anio'] = datetime.now().date().year
			vals['mes'] = datetime.now().date().month
			vals['semana'] = datetime.now().date().isocalendar()[1]
			
			vals['area_optimizado'] = area_optimizado
			vals['vidrios_optimizado'] = vidrios_optimizado
			vals['area_corte'] = area_corte
			vals['vidrios_corte'] = vidrios_corte
			vals['area_entalle_real'] = area_entalle_real
			vals['vidrios_entalle_real'] = vidrios_entalle_real
			vals['area_lavado'] = area_lavado
			vals['area_pulido']=area_pulido
			vals['area_insulado']=area_insulado
			vals['vidrios_insulado']=vidrios_insulado
			vals['vidrios_pulido']=vidrios_pulido
			vals['vidrios_lavado'] = vidrios_lavado
			vals['area_templado'] = area_templado
			vals['vidrios_templado'] = vidrios_templado
			vals['area_ingresado'] = area_ingresado
			vals['vidrios_ingresado'] = vidrios_ingresado
			vals['area_entregado'] = area_entregado
			vals['vidrios_entregado'] = vidrios_entregado
			vals['area_comprado'] = area_comprado
			vals['vidrios_comprado'] = vidrios_comprado
			results.append(vals)

		return results